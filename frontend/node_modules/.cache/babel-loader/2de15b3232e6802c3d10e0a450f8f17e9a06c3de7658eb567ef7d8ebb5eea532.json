{"ast":null,"code":"var _jsxFileName = \"/home/anegi/react/frontend/src/Component/Provider/UserProvider.js\",\n  _s = $RefreshSig$();\n// UserProvider.js\nimport { useState, useEffect } from \"react\";\nimport UserContext from \"../context/UserContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserProvider = ({\n  children\n}) => {\n  _s();\n  const [encryptedName, setEncryptedName] = useState(null);\n\n  // ✅ Load usernav from localStorage when the app first loads\n  useEffect(() => {\n    const storedUser = localStorage.getItem(\"user\");\n    if (storedUser) {\n      setEncryptedName(storedUser);\n    }\n  }, []);\n\n  // ✅ Sync usernav with localStorage when it changes\n  useEffect(() => {\n    if (!encryptedName) {\n      console.log(\"removing user in localStorage chala:\", encryptedName);\n      localStorage.removeItem(\"user\");\n    } else {\n      console.log(\"Storing user in localStorage chala:\", encryptedName);\n      localStorage.setItem(\"user\", encryptedName);\n    }\n  }, [encryptedName]);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      encryptedName,\n      setEncryptedName\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"d9lg4BEmlZFfma8keLsoo3cyMG0=\");\n_c = UserProvider;\nexport default UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["useState","useEffect","UserContext","jsxDEV","_jsxDEV","UserProvider","children","_s","encryptedName","setEncryptedName","storedUser","localStorage","getItem","console","log","removeItem","setItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anegi/react/frontend/src/Component/Provider/UserProvider.js"],"sourcesContent":["// UserProvider.js\nimport { useState,useEffect } from \"react\";\nimport UserContext from \"../context/UserContext\";\n\nconst UserProvider = ({ children }) => {\n  const [encryptedName, setEncryptedName] = useState(null);\n\n  // ✅ Load usernav from localStorage when the app first loads\n  useEffect(() => {\n    const storedUser = localStorage.getItem(\"user\");\n    if (storedUser) {\n      setEncryptedName(storedUser);\n    }\n  }, []);\n\n  // ✅ Sync usernav with localStorage when it changes\n  useEffect(() => {\n    if (!encryptedName) {\n      console.log(\"removing user in localStorage chala:\", encryptedName);\n      localStorage.removeItem(\"user\");\n     \n    } else {\n      console.log(\"Storing user in localStorage chala:\", encryptedName);\n      localStorage.setItem(\"user\", encryptedName);  \n    }\n  }, [encryptedName]);\n\n  return (\n    <UserContext.Provider value={{ encryptedName, setEncryptedName }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport default UserProvider;\n"],"mappings":";;AAAA;AACA,SAASA,QAAQ,EAACC,SAAS,QAAQ,OAAO;AAC1C,OAAOC,WAAW,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAExD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMS,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,UAAU,EAAE;MACdD,gBAAgB,CAACC,UAAU,CAAC;IAC9B;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAT,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,aAAa,EAAE;MAClBK,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEN,aAAa,CAAC;MAClEG,YAAY,CAACI,UAAU,CAAC,MAAM,CAAC;IAEjC,CAAC,MAAM;MACLF,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEN,aAAa,CAAC;MACjEG,YAAY,CAACK,OAAO,CAAC,MAAM,EAAER,aAAa,CAAC;IAC7C;EACF,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;EAEnB,oBACEJ,OAAA,CAACF,WAAW,CAACe,QAAQ;IAACC,KAAK,EAAE;MAAEV,aAAa;MAAEC;IAAiB,CAAE;IAAAH,QAAA,EAC9DA;EAAQ;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACf,EAAA,CA5BIF,YAAY;AAAAkB,EAAA,GAAZlB,YAAY;AA8BlB,eAAeA,YAAY;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}